#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('mytask:server');
var http = require('http');
const task = require('../td/task');
// const initApp =require('../src/system/InitializeApp')

// import { InitializeApp } from '../src/system/InitializeApp';
const {InitializeApp} = require('../src/system/InitializeApp');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


InitializeApp.initialize().then(() => {
    console.log('InitializeApp.initialize() success.');

    /**
     * Listen on provided port, on all network interfaces.
     */
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);

}).catch((err) => {
    console.log('InitializeApp.initialize() failed.');
    console.log(err);
    process.exit(1);
});


// 优雅关闭的逻辑
const gracefulShutdown = () => {
    console.log('Shutting down gracefully.');

    // 关闭服务器，不接受新的请求
    server.close(async (err) => {
        if (err) {
            console.error('Error during server shutdown', err);
            process.exit(1);
        }

        // 关闭所有其他资源，例如队列连接
        try {
            await task.release();
            console.log('Queue resources released.');
        } catch (error) {
            console.error('Error during queue shutdown', error);
        }

        console.log('All resources released, shutting down...');
        process.exit(0);
    });

    // 如果服务器在指定时间内未能关闭，则强制关闭
    setTimeout(() => {
        console.error('Could not close resources in time, forcefully shutting down');
        process.exit(1);
    }, 10000); // 10秒后强制退出
};

// 监听终止信号
process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
